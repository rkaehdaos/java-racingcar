name: Gradle test On GitHub Action
on:
  push:
    branches-ignore: [ 'main','master','rkaehdaos' ]

jobs:
  onPushTest:
    if: github.event.pull_request.opened == false
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@master

      - name: setup-java-21
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu' # See 'Supported distributions' for available options
          java-version: '21'
          cache: 'gradle'

      - name: test
        run: |
          echo "Available processors: $(nproc)"
          gradle test --no-daemon --parallel

      - name: Extract coverage info and update step summary
        run: |
          echo 'CSV 파일에서 커버리지 정보 추출';
          awk -F',' 'NR > 1 {instructions_covered += $5; instructions_missed += $4; branches_covered += $7; branches_missed += $6} END {print instructions_covered, instructions_missed, branches_covered, branches_missed}' build/reports/jacoco/test/jacocoTestReport.csv > coverage.txt
          read instructions_covered instructions_missed branches_covered branches_missed < coverage.txt               
          echo '커버리지 계산'; 
          total_instructions=$((instructions_covered + instructions_missed))
          total_branches=$((branches_covered + branches_missed))
          instruction_coverage=$(echo "scale=2; $instructions_covered / $total_instructions * 100" | bc)
          echo '분모가 0일 경우, 커버리지를 'N/A'로 설정';
          if [ "$total_instructions" -eq 0 ]; then
            instruction_coverage="N/A"
          else
            instruction_coverage=$(echo "scale=2; $instructions_covered / $total_instructions * 100" | bc)%
          fi
          if [ "$total_branches" -eq 0 ]; then
            branch_coverage="N/A"
          else
            branch_coverage=$(echo "scale=2; $branches_covered / $total_branches * 100" | bc)%
          fi
          
          echo '# Summary' >> $GITHUB_STEP_SUMMARY
          echo 'GITHUB_STEP_SUMMARY에 커버리지 정보 추가';
          echo "## JaCoCo 커버리지 요약" >> $GITHUB_STEP_SUMMARY
          echo "- Instruction Coverage: $instruction_coverage" >> $GITHUB_STEP_SUMMARY
          echo "- Branch Coverage: $branch_coverage" >> $GITHUB_STEP_SUMMARY

      - name: Extract PMD info and update step summary
        run: |
          echo 'PMD 파일에서 정보 추출: XML 구조에 의존적이므로 구조가 변경되면 스크립트도 업데이트가 필요';
          echo 'xml이 매우 크면 성능에 문제가 생길 수 있으므로 더 효율적인 파싱 방법의 고려가 필요';
          total_violations=$(grep -c '<violation' build/reports/pmd/main.xml)
          echo 'PMD 요약 정보 추가';
          echo "## PMD Code Analysis"
          echo "## PMD Code Analysis" >> pmd_summary.md
          echo "### Total Violations: $total_violations"
          echo "### Total Violations: $total_violations" >> pmd_summary.md
          echo '각 file 태그를 찾아 파일 경로를 추출하고, 내부의 violation 정보를 처리'
          grep -oP '<file name="\K[^"]+' build/reports/pmd/main.xml | while read -r file_path; do
            echo "### File: $file_path"
            echo "### File: $file_path" >> pmd_summary.md
            echo 'file 내부의 violation 정보 추출'
            grep -A 3 "<file name=\"$file_path\"" build/reports/pmd/main.xml | grep -oP '<violation beginline="\K[^"]+' - | while read -r line; do
              echo '메시지 추출 부분 수정'
              message=$(grep -A 3 "<file name=\"$file_path\"" build/reports/pmd/main.xml | grep -A 2 "beginline=\"$line\"" | grep -oP '>.*?</violation>' | sed -e 's/>//;s/<\/violation>//')
              url=$(grep -A 3 "<file name=\"$file_path\"" build/reports/pmd/main.xml | grep -A 2 "beginline=\"$line\"" | grep -oP 'externalInfoUrl="\K[^"]+')
              echo "- Line $line: [$message]($url)" >> pmd_summary.md
            done
          done
          cat pmd_summary.md >> $GITHUB_STEP_SUMMARY

      - name: Upload report if workflow failure
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: report-jacoco
          path: |
            build/reports/jacoco/test/html
            build/reports/pmd/*.html

      - name: Notification
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          author_name: GeunChang Ahn
          job_name: onPushTest
          fields: repo,message,commit,author,eventName,ref,workflow,job,took,
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}